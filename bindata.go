// Code generated by go-bindata.
// sources:
// www/index.html
// www/js/reconnecting-websocket.min.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x6d\x6f\xda\xc8\x13\x7f\x8d\x3f\xc5\xc8\x7d\x51\x20\x01\xaf\x1f\x78\x2a\x38\x12\x06\xfb\xff\xbf\x93\xae\x77\x6a\x7a\xea\x49\x55\x5a\x2d\xf6\x02\xdb\x33\x6b\xe4\x5d\x42\x73\x55\xbe\xfb\x69\x1f\x0c\x0e\xa1\x49\xaa\x5e\x94\x17\xe3\x99\xd9\xdf\xcc\xfc\x66\x66\x6d\x26\x6b\xb1\xc9\x21\xc7\x6c\x15\xda\x84\xd9\x70\x65\x4d\xd6\x04\x67\x57\x56\x63\xb2\x21\x02\x43\xba\xc6\x25\x27\x22\xb4\xff\x7c\x9f\x74\x86\xf6\x41\xcf\xf0\x86\x84\xf6\x2d\x25\xfb\x6d\x51\x0a\x1b\xd2\x82\x09\xc2\x44\x68\xef\x69\x26\xd6\x61\x46\x6e\x69\x4a\x3a\xea\xe1\x12\x28\xa3\x82\xe2\xbc\xc3\x53\x9c\x93\xd0\xb5\xaf\x2c\x00\x80\x09\x4f\x4b\xba\x15\xc0\xcb\x34\xb4\x9d\x2f\xdc\x29\x49\x5a\x30\x46\x52\x41\xd9\xaa\xb3\x27\x0b\x5e\xa4\x7f\x13\xd1\xdd\x50\xd6\xfd\xc2\xed\xab\x89\xa3\x0f\xc8\x1c\x04\x15\x39\xb9\xfa\x8b\x88\x75\xb9\x83\x0f\x64\x01\x73\xb2\x29\x26\x8e\x56\x5b\xd6\xc4\xd1\x45\x4c\x16\x45\x76\x27\xfd\x53\xcc\x6e\x31\x07\x9a\x85\x36\xde\x6c\x73\x2a\x76\x19\xf9\x5c\x12\x96\x91\x52\x02\x6b\xf3\x89\xe3\x76\x8d\xf9\x39\xa7\x49\x95\x86\xd5\xb8\xc5\x25\xac\x4a\x9c\x51\xc2\x04\x84\xf0\xd1\x7e\x85\x90\xeb\x26\x89\x7d\x09\xf6\x2b\x94\xb8\x28\x41\x4a\x74\x63\x94\xc4\xae\x12\xbd\x39\x8a\xe7\x9e\x12\xfd\x19\x9a\xcf\x7c\x25\x06\x11\x8a\x22\x2d\xf6\xa6\x68\x3a\x0d\x94\xd8\x1f\xa1\xe9\xa8\xaf\xc4\xc1\x10\x8d\x86\x03\x25\x0e\x07\x68\x38\x18\x2a\x71\xd4\x47\x83\xfe\x48\x89\xd3\x1e\xea\xf5\xb4\x18\x05\x28\x08\xa6\x4a\x9c\xf9\x28\xf0\x67\x4a\x9c\x7b\xc8\xf7\xe6\x4a\x8c\x5d\xe4\xb9\xb1\x12\x13\x84\x5c\xa4\xf3\x4d\x12\x84\x10\xaa\xb4\x09\xea\x19\x5f\x37\x46\x53\x83\xe0\xcd\x8d\xef\xcc\xf7\x67\xae\x4e\x32\xf2\x83\xc8\x35\x39\x04\xbd\xa9\xc1\x1d\xf5\xfb\x23\xcf\x37\xf9\x0e\x86\xde\xd0\x54\x31\x1c\x98\x1c\xfa\xa3\x51\xdf\xd7\x3c\xf4\x46\xd3\x9e\xaf\x6b\x0b\xa6\x51\x95\xaf\x3f\x9b\xf9\x41\xc5\xd9\xdc\x0b\xfa\x86\xc9\xd8\x0d\x22\xc3\x6f\x82\x7a\x3a\x5f\x84\x92\xa4\xd7\xab\xb4\xf3\x5e\xc5\x7a\x12\x19\x5f\x6f\x9e\x8c\x0c\x82\x3f\x4b\x06\x06\x37\x88\x92\xbe\x1f\x19\xd6\x93\xc0\xef\x9b\xcc\x12\xcf\x64\x36\x18\x26\xc8\xe4\x3b\x1c\xc4\x89\x57\xb1\x1e\xcf\x4d\x6d\xd3\x5e\x1c\xb9\x73\xc3\x7a\x3c\x72\x87\x86\x9d\x78\x68\xd8\x99\x7b\x71\xdf\x70\x16\xbb\x71\x60\x98\x4c\x50\xec\x19\x7e\x93\x24\x76\x11\xb2\x6f\x2c\xab\xe1\x38\xf0\x3f\x22\xc0\x8c\xe0\x4c\x6e\xd4\x57\x61\x35\xf0\x66\x6b\x54\x21\x64\x45\xba\xdb\x10\x26\xba\x2b\x22\xe2\x9c\x48\x31\xba\xfb\x25\x6b\xbe\x3e\x9d\xea\xd7\xad\xb1\x3e\x29\xbe\x42\x08\x07\x08\x79\xce\x00\x37\x5f\x7b\x99\xf4\xb2\x1a\x6a\xd0\x9f\x0f\x51\xdf\x07\x05\xaf\xcf\xa9\x00\x35\x88\xb3\x21\xe4\xa2\xbc\x2d\xca\x0d\xce\x29\x27\xd3\xb2\xc4\x77\x72\x5d\x6e\xc6\x56\x63\xb9\x63\xa9\xa0\x05\x3b\x9a\x9b\x2d\xf8\x66\x35\xd4\x91\x62\xb9\xe4\x44\x6e\x16\xea\x06\x46\xb5\x2c\xf1\x86\x70\xfa\x0f\x51\x5a\x24\xd5\xcb\xa2\x84\xa6\xb4\x51\x08\x11\x8c\x81\x4e\x7a\xde\x18\xe8\xc5\x45\x4b\xe2\x34\x1e\xc6\xfd\x48\x6f\x42\x68\x6a\xe0\x4f\x41\x0b\x2e\x20\x68\x1f\x30\xdb\xb4\x5d\x99\xfc\x16\x74\xa0\x7f\x78\xf4\x5a\xed\xe6\xc1\xed\x93\x27\x8d\x41\x9b\xb6\xb5\xb5\x6e\xf2\x25\x64\xed\x39\x90\x4c\x35\xee\x2d\xf9\x5f\x2b\xd1\xaa\x55\xae\x29\x9d\x6e\xb6\xcd\x0c\x0b\xac\xab\xd7\xad\xeb\x1a\x4a\xd5\x3d\x0a\x10\xc2\x9e\xb2\xac\xd8\x77\x29\x63\xa4\xfc\x20\x95\x9d\x1e\x1a\x3f\x72\x5f\x13\xba\x5a\x8b\x53\xff\xff\x2b\xad\xe3\xd7\xfd\x73\x82\xcb\x77\x24\x15\x4d\x74\x09\xe8\xb2\x36\x27\xe6\xe6\x3e\x2a\x34\xa6\x2a\x66\x81\x4b\x35\x28\x58\xe0\x6e\x4e\xd8\x4a\xac\x65\x8b\x1f\xb4\x01\xd0\x18\x28\x4c\x40\xba\xea\x56\xa8\xaa\xe4\x88\xa7\xc5\x46\xce\x14\x14\x3b\x01\x8c\x7c\x15\x90\x53\x46\x80\x2e\xe1\xae\xd8\x41\x56\x30\x01\x7b\xcc\x04\xb8\x4e\x20\xd6\xb0\x2d\xf6\xa4\x04\x56\xf1\x96\xc1\x61\xce\x25\x9a\xcc\x40\xf5\xb3\x63\xa4\xf6\xa3\x5e\xb7\xbb\xc8\x93\x39\xcb\xa4\x3f\xcb\x49\xa5\xd0\x3e\x2d\xd3\x51\x59\x56\x4e\x9a\xeb\x10\x9a\xe7\xbc\x5a\x9d\x23\x9a\x61\xb9\x16\xfd\x94\x2d\x47\x37\xa7\x62\x7b\x49\xf3\xfc\x5a\xdc\xe5\x72\x74\xab\xb7\xc6\x47\x7a\x73\xe2\xa1\xda\xa1\xb2\x7d\x4c\xff\x25\x1c\x32\xd4\x62\xad\x2b\x6a\xc4\x1e\x4d\xd5\x1f\x72\x31\x6b\x73\x55\xed\xec\x8b\x27\xeb\xf4\xc0\xf3\xb3\x75\x3c\x71\x32\x5d\xf5\x4b\xc2\xd4\x50\x57\xfd\x37\x13\x56\xef\xf3\xa3\x80\xdf\xe9\xf4\x79\xbf\xb3\xbd\xfe\x0d\x8b\x75\x97\x53\xd6\x34\x3d\x6f\xb5\xfb\xba\xc7\x87\xaa\x9f\xe8\xf2\x03\x9f\x7a\x9f\x1f\xd3\xe0\x78\x2f\xe8\xb5\xe3\xc0\xfb\x35\xe5\xb0\x22\x82\x43\x8a\xf3\x9c\x64\x40\x6e\x49\x79\x07\x82\x6e\x08\xec\x89\xb4\x00\x23\x7b\x58\x60\x4e\x16\x98\x65\x8a\xd2\xda\x90\x44\x98\x93\x08\xb3\x2c\xd9\xb1\xb4\x59\x39\x69\x26\xd5\xaa\x32\x5e\xe4\xa4\x9b\x17\xab\xa3\xd1\x6a\x34\x8e\x17\x56\xa5\xed\x1e\xf6\xf2\x68\xd7\xa3\x77\xf0\x50\x35\xb6\x7e\x34\xf1\x92\xf0\x2d\x2d\xb1\x4a\xf6\x24\xf7\x77\x47\x93\x4a\xbf\xe6\x2a\x2b\xf8\xd1\x48\x3c\x27\x64\x7b\x1a\xe3\x5a\x2a\x15\xba\x32\x9f\x65\x46\x5b\x54\x38\x15\xef\x9a\x88\xdd\x56\x7e\x94\xea\xef\x57\xf5\x26\x57\x5f\xb5\x05\xe3\x87\x97\xbc\x58\x13\xd8\x95\xf9\x1b\xf9\xf5\x0c\xc5\xd2\x3c\x53\xfd\xa6\xe4\xa4\xbc\x25\xe5\x71\xc5\xf2\x22\x55\x65\x8d\xb5\x79\x5b\x16\xa2\x48\x8b\x7c\x6c\x35\xe8\x12\x9a\xda\xbb\x5b\x69\x21\x0c\x43\xb0\xd7\x42\x6c\xf9\x1b\xdb\x2c\xfd\xc1\x04\xf6\x9e\xf3\x37\xf6\xd8\x6a\xdc\x03\xc9\x39\x39\x63\xd6\x56\xf3\xce\x3e\xcc\x4d\xa8\x38\x7a\x57\xfb\x42\xff\x40\x16\xd7\xaa\xc0\xe6\xe1\xfc\x05\xd8\x8e\x63\xc3\x85\x29\xa0\xbb\x2e\xb8\x50\xca\x3d\x77\x16\x0b\x5b\x8e\xee\x61\x1c\x0a\x96\xe6\x05\x97\x4b\x52\x91\xdd\x24\x2d\xf8\x56\x27\xd6\x8e\xaa\xe8\x73\xca\x4d\x60\x92\xd9\xad\xfb\x87\x38\xc5\x96\xb0\x97\xc1\xcc\xbe\x8b\xb1\x21\x9c\xe3\xd5\xa3\x6c\xcc\x37\x47\x8d\x85\x5f\xaf\x7f\x7f\xdb\xdd\xca\xdf\x44\x4d\xd2\x55\xd7\xaa\xdc\xc7\xf3\x6b\x64\x35\xee\x4d\xc7\xea\x53\xfc\xd3\x4c\x4a\x30\xc5\x65\x0d\xf5\x45\x74\xd6\x16\xe6\x0c\xa3\x0f\xd1\x9e\x25\xb5\x0e\x36\x7b\x0a\xe9\x69\x6a\x1f\x32\x73\x9e\xdd\xa7\x16\xfd\xc8\xb1\xde\xdf\x9f\x66\x57\xc1\x28\x7a\x95\xf4\x22\x62\xd5\x2d\x71\x86\xd2\x0a\xe1\x59\x32\x35\xc0\xec\xfc\xe9\xa7\x09\xac\xca\x3e\x4f\xdd\xe9\xfd\xa5\xe8\x52\x7f\xc7\x5f\xd3\xd6\xc4\xd1\x3f\x93\xff\x0d\x00\x00\xff\xff\x9e\xc8\x85\xa6\x0c\x10\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 4108, mode: os.FileMode(420), modTime: time.Unix(1476446014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJsReconnectingWebsocketMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5d\x6f\xab\x36\x18\xbe\xdf\xaf\x20\x5c\x20\x7b\xc7\x07\x35\xeb\x76\x13\xe4\x55\x55\x1b\x4d\x95\xba\xf6\xa8\xad\xb6\x8b\xaa\x3a\x32\xf6\x1b\xe0\x14\xec\x08\x4c\x7b\xaa\x84\xff\x3e\xd9\x06\x42\x80\xf6\xa6\x93\xa2\x60\xbf\x1f\xf6\xe3\xf7\xe3\xb1\x17\x9b\x5a\x72\x9d\x29\x89\x18\x89\xf1\xce\xef\xa6\x3e\xa5\xfa\x6d\x0b\x6a\xe3\x09\xd8\x64\x12\x82\xc0\x7d\x43\x56\x88\x33\x37\x44\x8f\x4f\x24\xc6\x2b\xbf\x96\x6e\x2e\xfc\x45\xe7\x53\x28\x51\xe7\x10\x04\xee\x1b\xc2\xcf\xad\x2a\x75\x75\x76\x3c\xa5\x31\xc2\x2b\x16\xde\x01\x57\x52\x02\xd7\x99\x4c\xfe\x85\xf8\x5e\xf1\x67\xd0\x46\xd7\x20\x9d\x66\x15\xe9\x01\xe2\x5d\x37\xf4\x18\x8a\x09\x27\x62\x20\xc9\x1d\xfe\x17\x56\x7a\x9c\x0a\xc5\xeb\x02\xa4\x0e\x79\x09\x4c\xc3\xfa\x05\xa4\x46\xfe\x45\x5d\x69\x55\xd8\x89\x8f\xa3\x12\x74\x5d\x4a\x8f\x87\x99\xcc\xf4\x40\x85\x18\x59\x2c\xcd\x2f\xc6\x84\x37\x66\x3d\xa0\x3b\x01\x71\x9d\xac\x16\x4b\xc2\x6a\xad\x0a\xa6\x33\x7e\xbb\x05\xb9\x5a\x9c\x90\xb2\x43\x7f\x25\x35\x94\x2f\x2c\x5f\x2d\xe1\x94\x14\xec\xe7\xdd\x44\x71\x0a\xbf\x1f\xcc\x2f\x81\xb3\xb7\xd5\x32\xfc\x83\xe8\xac\x00\x55\x1f\xcc\x7e\x83\xd3\x26\x12\xfb\x3d\x12\x74\xd7\xe0\x68\xa3\x4a\x64\x50\x6c\xbc\x4c\x7a\x80\x4d\x48\x1e\x37\x4f\x74\x2e\xea\xe2\x71\xf3\x74\x66\xfe\x56\xf0\xb8\x79\x8a\x8c\x69\x58\x97\x39\x8d\x89\x1d\xf6\x7b\x9f\x6b\x0d\xc5\x56\x57\xf4\xa4\x53\x30\xf1\x76\xaf\x99\x06\xda\x27\x20\xbc\xb8\xbd\xb9\x59\x5f\x3c\x5c\xdd\xfc\xe5\x8c\xb6\xa5\xd2\x8a\xab\x9c\xca\x3a\xcf\x23\x83\x28\x25\x09\xb5\x19\xca\xe8\x62\x49\x7e\x98\xbf\xe7\x49\xe8\x73\x28\x6c\xf0\x45\xf6\xe2\xe3\xe8\x39\x64\x42\xd8\x30\x5f\x67\x95\x06\x09\x25\xf2\xd5\x16\xa4\x7f\xc8\x32\xc3\xbb\x24\x54\xd2\x48\x11\xc3\x0d\x26\x73\x3e\x3c\x57\x15\x4c\x9d\xac\xf8\x03\xaf\xbe\xce\x66\x5c\x7b\xdd\xfb\xfe\x05\x54\x15\x4b\x66\xf6\x6d\x15\xef\x7b\x42\x59\xaa\x72\xea\x67\xc5\xce\xcb\xc6\x78\xec\x48\xa7\x6b\x85\x71\x26\x05\x7a\xc6\x5d\xe6\x0a\xf5\x02\x63\x9f\x19\xe9\xb1\x9b\xc8\xaa\x2d\xd3\x3c\xb5\x26\xf4\xf9\x78\x7e\x6c\x6a\xf2\x40\x7b\xdc\x31\xde\xa5\x54\xc2\xab\xd7\xd7\x09\x4a\x4c\x89\x11\xbe\xdf\x3f\x3e\x61\x12\xef\xf7\xa3\xd5\x50\x7e\x14\x77\x8c\x09\x4a\x42\xdb\x4e\xfb\x3d\x73\x83\xf3\x3c\xc7\x41\xc0\x95\xac\x54\x0e\x4e\x84\xfc\x59\x56\xf0\x89\xcf\x5c\xed\x7e\x6d\xb5\x3e\xb1\xfb\x63\x5b\x90\x82\xa6\x04\x68\x05\xfa\xc1\xb5\x14\x1a\x50\xc7\xe7\x76\xed\xa4\x4a\x7e\x6d\xdb\xb5\xdb\xd8\xd4\xfd\x09\x11\xa1\x2b\x3d\x3b\x5d\x36\x24\x09\x47\x5d\x8d\xa3\xb4\x2d\x6a\x3a\x00\xc5\x73\x60\x65\x07\x16\x3e\x1b\x1a\xb7\x7e\x0f\x2c\x39\xb4\x6c\xda\x0f\x49\x32\xdf\xed\xb7\xdf\xd6\x37\x56\x37\xa1\x88\x36\xb2\x79\xdb\xa8\x38\x12\x61\x56\xf5\x10\x68\x4c\x62\xdb\xf8\xa3\xac\x0b\xdc\x90\xb4\xeb\xc8\xc3\x91\x39\xde\x65\x1b\x34\x3e\x76\x6a\x39\x85\x64\xf8\x1d\x70\x17\xd7\xb7\xf7\xeb\xcb\xc9\x1e\x79\xc7\x03\x18\x47\x90\x57\xb0\x7b\xcf\xbd\x67\xb2\xc3\x59\x86\x25\x19\x89\x90\x2b\x01\x94\xdb\x0f\x11\x66\x95\x4a\x49\xca\xdb\x01\x11\xe1\x2b\xab\x2e\x72\x60\x46\xd6\x0d\x67\x8e\x6c\xca\xff\xc7\x7e\x8f\x3e\x9b\xc6\x96\xdd\xda\x3c\x7e\x70\x6c\x57\xf6\x40\x07\x89\xeb\x0a\xee\xd7\xbf\x99\x4e\xc3\xad\x7a\x45\x03\xa5\xbd\x74\xe6\xd2\x8c\xa3\xf9\xae\x99\x31\xfd\xf2\x85\x24\x96\x15\xd0\xe2\x04\x37\x04\xfe\x4c\xc2\xb9\xdb\xee\x6c\x5e\xbc\x02\xdc\xb8\xca\x68\x39\xf3\x88\x5b\x3e\x1b\xb8\x9e\xa0\x1d\x29\xc5\xa1\x60\x9a\xb9\x20\x71\x93\xf5\x4e\x8f\x23\x6e\x55\xd4\x59\x4c\x42\xcc\xdb\xea\xb5\xfc\xfc\xbf\x22\x6c\x2f\x82\x16\xdf\x6c\x72\x9d\x09\x36\x71\x5a\x52\xea\xee\x85\xe1\xab\x23\x08\x7a\x62\x46\x8b\x65\x4b\xd3\x15\x48\x71\x04\x34\xdb\xa0\x14\xbb\x37\xce\xe7\x30\x9b\x95\x07\x80\x53\xbb\x15\x8a\x71\xa4\xd3\x52\xbd\xfa\x57\x37\xff\x9c\x5f\x5f\x5d\x7e\xbf\x7f\x38\x7f\x58\x7f\x5f\xdf\xdd\x79\x2b\xef\x1b\xab\xab\x4c\x26\x9e\x56\x5e\x5f\x3e\xde\x2b\xc4\x95\x5b\xb3\x71\x90\x47\xd4\xe0\x9e\x9f\x87\x57\x4d\xff\xfe\x64\x41\x80\x18\x5d\xc2\x29\x36\x0f\x8d\x13\x92\x06\x41\xda\xd2\xad\xf1\x69\xba\x9b\x70\x53\x42\x95\x0e\xd9\x75\x60\x88\x9b\xa6\x7d\xef\x31\x47\x85\x66\xed\x19\x42\x6e\xc8\xb1\x7e\x84\x71\xc6\xa0\x8f\xd9\x47\x56\x93\x5a\x9f\x9a\x8c\x4a\xcd\x19\x74\xd9\x32\x0c\xcb\x06\x3c\x36\xff\x4c\x63\x96\xc5\xc7\xa4\xce\x2c\x7d\x8e\x9c\x9c\xa4\xd5\xad\x2f\xa7\x5c\xcb\x1a\x1c\xfd\xf2\x5f\x00\x00\x00\xff\xff\xb7\x83\xb6\x2c\x1c\x0c\x00\x00")

func wwwJsReconnectingWebsocketMinJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJsReconnectingWebsocketMinJs,
		"www/js/reconnecting-websocket.min.js",
	)
}

func wwwJsReconnectingWebsocketMinJs() (*asset, error) {
	bytes, err := wwwJsReconnectingWebsocketMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/js/reconnecting-websocket.min.js", size: 3100, mode: os.FileMode(420), modTime: time.Unix(1476401448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/js/reconnecting-websocket.min.js": wwwJsReconnectingWebsocketMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"reconnecting-websocket.min.js": &bintree{wwwJsReconnectingWebsocketMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

