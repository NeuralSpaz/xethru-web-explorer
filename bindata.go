// Code generated by go-bindata.
// sources:
// www/index.html
// www/js/reconnecting-websocket.min.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x79\x8f\x9b\x48\x16\xff\xdb\x7c\x8a\xb7\xe4\x8f\xb6\xdd\x6d\x53\x06\x9f\xb1\x69\xc9\x17\x7b\x48\x99\x5d\xa5\x33\xca\x4a\x51\x27\x2a\x43\xb9\x5d\x13\x0c\x08\xca\xed\xf4\x8e\xf2\xdd\x57\x75\x80\xcb\x80\xbb\x3b\xca\xee\x4c\x0e\xa9\x78\xf5\xae\xfa\xbd\x83\x57\x78\xb6\x63\xfb\x10\x42\x1c\x3d\xb8\x26\x89\x4c\xb8\x35\x66\x3b\x82\x83\x5b\xa3\x31\xdb\x13\x86\xc1\xdf\xe1\x34\x23\xcc\x35\x7f\xfd\xe0\x75\xc6\x66\x41\x8f\xf0\x9e\xb8\xe6\x23\x25\xc7\x24\x4e\x99\x09\x7e\x1c\x31\x12\x31\xd7\x3c\xd2\x80\xed\xdc\x80\x3c\x52\x9f\x74\xc4\xc3\x0d\xd0\x88\x32\x8a\xc3\x4e\xe6\xe3\x90\xb8\x3d\xf3\xd6\x00\x00\x98\x65\x7e\x4a\x13\x06\x59\xea\xbb\xa6\xf5\x5b\x66\xa5\xc4\x8f\xa3\x88\xf8\x8c\x46\x0f\x9d\x23\xd9\x64\xb1\xff\x95\xb0\xee\x9e\x46\xdd\xdf\x32\xf3\x76\x66\x49\x01\xee\x03\xa3\x2c\x24\xb7\xff\x26\x6c\x97\x1e\xe0\x23\xd9\xc0\x8a\xec\xe3\x6c\x66\x49\xba\x61\xcc\x2c\x79\x8a\xd9\x26\x0e\x9e\xb8\x00\x8d\x92\x03\x03\x1a\xb8\xe6\x3a\xc2\x9b\x90\x2c\xc3\x03\x63\x24\x7d\x87\x93\xc5\x81\xb1\x38\x32\x81\x3d\x25\xc4\x35\x37\xea\xe9\x11\x87\x07\x92\x33\x83\xe2\x86\x77\x38\x31\x21\x8e\xfc\x90\xfa\x5f\xab\x9a\x9a\xad\xa9\x79\x6b\x18\x8d\x99\x8f\xa3\x47\x9c\x09\x6b\x29\xc9\x92\x2f\x29\x89\x02\x92\xf2\x13\xc8\x9d\x32\x53\x16\x12\xf2\x32\x17\xde\x27\x21\x65\x87\x80\xbc\xc8\x99\xec\x70\x56\xcb\x35\x2b\x10\x7c\xc4\x29\xf8\x85\xe7\xf2\x24\x01\xb8\xb0\xc5\x61\x46\xe4\xf6\x43\x8a\x03\x4a\x22\x06\x2e\x7c\x32\xdf\x20\xd4\xeb\x79\x9e\x79\x03\xe6\x1b\xe4\xf5\x90\x87\xc4\xb2\xb7\x46\xde\xba\x27\x96\xf6\x0a\xad\x57\xb6\x58\x3a\x4b\xb4\x5a\x3a\x62\xd9\x5f\xa0\xc5\x42\x2e\x07\x73\x34\x9f\xf7\xc5\x72\x38\x41\xf3\xc9\x50\x2c\x47\x63\x34\x19\x8f\xc4\x72\x3c\x42\xe3\xd1\x58\x2c\x27\x43\x34\x1a\x4e\xc4\x72\x3e\x40\x83\x81\x5c\x2e\xfa\xa8\xdf\x9f\x8b\xe5\xd2\x41\x7d\x67\x29\x96\x2b\x1b\x39\xf6\x4a\x2c\xd7\x3d\x64\xf7\xd6\x62\xe9\x21\xd4\x43\xd2\x5f\xcf\x43\x08\xa1\x9c\xea\xa1\x81\xe2\xed\xad\xd1\x5c\x69\xb0\x57\x8a\x77\xe9\x38\xcb\x9e\x74\x72\xe1\xf4\x17\x3d\xe5\x43\x7f\x30\x57\x7a\x27\xc3\xe1\xc4\x76\x94\xbf\xa3\xb1\x3d\x56\xa7\x18\x8f\x94\x0f\xc3\xc9\x64\xe8\x48\x1c\x06\x93\xf9\xc0\x91\x67\xeb\xcf\x17\xb9\xbf\xce\x72\xe9\xf4\x73\xcc\x56\x76\x7f\xa8\x90\x5c\xf7\xfa\x0b\x85\xaf\x87\x06\xd2\x5f\x84\x3c\x6f\x30\xc8\xa9\xab\x41\x8e\xba\xb7\x50\xbc\xf6\xca\x9b\x28\x0d\xce\xd2\x1b\x29\xbd\xfd\x85\x37\x74\x16\x0a\x75\xaf\xef\x0c\x95\x67\x9e\xad\x3c\x1b\x8d\x3d\xa4\xfc\x1d\x8f\xd6\x9e\x9d\xa3\xbe\x5e\xa9\xb3\xcd\x07\xeb\x45\x6f\xa5\x50\x5f\x4f\x7a\x63\x85\xce\x7a\xac\xd0\x59\xd9\xeb\xa1\xc2\x6c\xdd\x5b\xf7\x15\x92\x1e\x5a\xdb\x0a\x5f\xcf\x5b\xf7\x10\x32\xef\x0d\xa3\x61\x59\xf0\x57\xc2\x40\x65\xe8\x92\xb7\x8a\x6f\xcc\x68\xe0\x7d\xa2\x48\x2e\x04\xb1\x7f\xd8\x93\x88\x75\x1f\x08\x5b\x87\x84\x2f\x17\x4f\x7f\x0f\x9a\x57\xe5\xac\xbf\x6a\x4d\xa5\x24\xfb\x06\x2e\x14\x2a\xb8\x9c\x52\xdc\xbc\xb2\x03\xce\x65\x34\x44\x1d\xbc\x6c\x42\x2f\x17\xa1\x5e\xca\x09\x03\x9a\x8a\x5a\x13\xbc\xbe\x5f\xb6\xa0\x75\x01\x61\x40\x48\x09\xfd\x27\xf9\x5a\xf5\xa2\x33\xbc\xac\x5f\x6f\x20\xc2\x80\x94\x13\x16\x34\x15\x75\x26\x64\xad\xff\x12\xa7\x7b\x1c\xd2\x8c\xcc\xd3\x14\x3f\xf1\x8a\xbf\x9f\x1a\x8d\xed\x21\xf2\x19\x8d\xa3\xd3\x76\xb3\x05\xbf\x1b\x0d\x21\x12\x6f\xb7\x19\xe1\xcd\x01\x75\xfb\x8a\xb4\x4d\xf1\x9e\x64\xf4\x3f\x44\x50\x11\x27\x6f\xe3\x14\x9a\x7c\x8f\x82\x8b\x60\x0a\x74\x36\xb0\xa7\x40\xaf\xaf\x5b\x5c\x4f\xe3\xdc\xee\x27\x7a\xef\x42\x53\x2a\xfe\xdc\x6f\xc1\x35\xf4\xdb\x85\xce\x36\x6d\xe7\x5b\x4e\x0b\x3a\x30\x2c\x1e\xed\x56\xbb\x59\xb0\x7d\xb6\xf9\x66\xbf\x4d\xdb\x72\x57\xdf\x72\xb8\x4a\xed\xb9\xcf\xa1\x6a\x7c\x37\xf8\x3f\xed\x88\x86\x76\xf2\x6a\x8f\x17\x00\x54\x5b\xe7\x67\x17\x58\x7a\x20\x46\xa3\x41\xb7\xd0\xfc\x4b\x85\x41\xca\x35\x2e\x85\xf0\xd2\x6b\xa9\xd5\x15\x6f\x22\x70\xa1\xee\x5d\x24\xdc\x07\x12\x66\xe4\xa7\xb5\xaf\x68\x56\xaf\x9e\xa3\x23\x93\xe4\x24\xce\x13\x04\xdd\xfc\x21\x7f\xef\xa7\x7a\x38\x7e\x4d\x02\xcc\xf4\x70\x14\xed\xe1\x06\x8e\x84\x3e\xec\x98\xc4\xb9\x9a\x76\x50\x70\x76\x43\x12\x3d\xb0\x9d\x96\x85\x27\x7d\x22\x03\xcf\x1e\xdb\xcd\x5e\x27\xd7\x7c\x0d\x27\x7b\x7c\x4b\xd1\x4f\x28\x15\x7e\xca\x52\x9c\xef\x93\x66\x80\x19\x96\x3e\xc9\xa6\xd5\x55\xa5\x28\x46\x23\x00\x17\x8e\x34\x0a\xe2\x63\x97\x46\x11\x49\x3f\x72\x62\x67\x80\xa6\x15\xf6\x9d\x30\x55\xe6\xff\x9b\xa0\x5a\x8e\xce\x1f\x12\x9c\xbe\x27\x3e\x6b\xa2\x1b\x40\x37\x5a\x87\x54\xc3\xd8\x89\x20\x75\x8a\x1a\xd8\xe0\x54\x34\x18\xcc\x70\x0e\x8f\x51\x82\x11\xd0\x14\x28\xcc\x80\xb3\x4a\xec\x64\xce\x59\x16\xf8\xf1\x9e\xa7\x1a\xc4\x07\x06\x11\xf9\xc6\x20\xa4\x11\x01\xba\x85\xa7\xf8\x00\x41\x1c\x31\x38\xe2\x88\x41\xcf\xea\xb3\x1d\x24\xf1\x91\xa4\x10\xe5\xe5\x16\x9c\x02\x23\x32\x18\x33\x2c\xdb\x40\x47\x2d\xdb\x95\x1e\xd1\x6a\x77\x91\xcd\xbd\xe6\x6e\x7f\xe1\x3d\x8e\x42\xbb\x7c\x50\x4b\xf8\x99\x33\x49\xb4\x5d\x11\xbf\x0a\x57\xab\x73\xd2\xa6\x70\x76\xa1\x30\x5f\xc6\xcb\x92\xe1\xc9\xf1\xde\xd2\x30\xbc\x63\x4f\x21\x2f\xa2\x7c\x62\xfa\x44\xef\x4b\x1c\x22\x20\xc2\xdb\x6a\x00\x6e\xa0\xf0\x50\x2e\xb5\xb8\xd4\xe7\xd5\xbf\xf8\x4b\x49\xcb\xac\xfc\x7d\xf5\xea\xdc\x2a\x0b\xbc\x9c\x5d\x27\x89\x52\x7e\xe9\x2f\x48\x75\x06\x9d\xf4\xbf\xc9\x31\x3d\xce\x15\x83\x17\x22\x5d\xcf\x57\x1b\xeb\x77\x98\xed\xba\x19\x8d\x9a\x2a\xe6\xad\x76\xb3\x1e\x21\xcb\x11\x27\x39\xa1\xf1\x4c\xf4\xcf\x78\xf4\xf8\x57\xe1\xb1\xec\x1f\xcf\x81\xf7\x24\x4b\x68\x8a\x39\x45\xcb\x04\x35\x58\xbc\x3a\x11\x4a\xfc\xcf\xe6\x81\x7d\x2e\x51\xca\x03\x6d\x90\x51\xc7\xd0\x28\xda\x69\x72\x79\x1d\xb9\xab\x37\x9e\x37\x18\x39\xce\xd5\x14\x2c\x0b\x96\x71\x18\xf3\xf1\x02\xd8\x8e\x88\x4c\x30\x4e\x09\xd0\xac\x3b\xa0\x65\xe7\xf9\xf5\x85\x8f\x2e\x03\xe3\x3c\x13\x44\x25\x77\xf7\xf1\xa3\x78\x1f\xb6\x07\xc8\x28\x85\xbf\x1e\x84\x4e\x0f\x95\xdc\xd5\x83\x28\x8c\x3d\x17\xb5\x42\x30\x8e\x2e\xda\xb0\x6c\xb8\x06\x33\x61\x30\x4f\x29\x0e\x4d\x5d\x8c\xcf\x68\xf3\x90\x3e\x44\xfc\xdd\xec\x93\x88\x91\xb4\xb2\xbf\xc0\x19\x11\x9d\xd6\x05\x73\x4f\x83\x20\x24\xe6\x45\x84\x37\x21\xf6\xbf\x5e\xf1\x6d\x2e\xc9\x25\x32\x86\x19\x79\x0b\x26\x5c\xcb\x92\x14\xcf\xdc\x1f\x48\x93\xbd\x46\x4f\x93\x7d\x97\xc5\x1e\xfd\x46\x82\xa6\xdd\x12\x0c\x01\xcd\x18\x8e\x7c\x5d\x3a\x27\x69\xac\x65\x5f\x3e\xf0\xb1\x93\x5b\xbf\x29\xa3\xa1\xa2\x58\xa1\xe7\x28\x71\x55\x35\x25\x70\xc7\x27\x5b\x2d\xf9\xf3\xa1\xf7\xd5\xd9\x5f\x16\x78\x45\xfa\x9f\x44\x4a\xf9\xaf\x8f\xd9\x2a\x23\x74\x92\x96\x19\x96\x05\x5b\x9c\x31\xc8\x33\x52\xd7\x7a\x5e\x15\x8e\x33\x99\x6c\xb7\xaf\xa8\x8a\xda\x93\xbf\x50\x16\x67\x55\xc1\x1d\xb2\x6a\xb5\xb4\x6d\x84\x2a\x15\x73\x01\x38\x59\x32\x67\x87\xf9\xa1\x9a\xb1\x2c\xb8\x0b\xe3\xe3\x2b\x90\x99\x4c\x7c\x1f\xa1\xff\x13\x32\xe7\x0d\x23\x0b\xe3\xe3\x9f\x0d\xcd\x99\xa8\x6c\x28\xf5\x76\x6a\x3a\x4a\xc1\x78\xa9\xa5\x9c\x31\x5c\xe8\x29\xf5\x61\xf8\x93\x9a\xca\x99\x33\x5a\x57\xb9\x10\xeb\xea\x46\xb9\xaf\x58\x16\x7c\xd8\xd1\x0c\x1e\x08\xcb\xc0\xc7\x21\xbf\xcf\x91\x47\x92\x3e\x01\xa3\x7b\x02\x47\xc2\x77\x20\x22\x47\xd8\xe0\x8c\x6c\x70\x14\x08\xff\xb4\x86\xc4\x61\x5b\xe0\x28\xf0\x0e\x91\xdf\xcc\x99\x64\x57\xaa\x5c\x59\xf2\xed\xae\x76\x77\x41\x5d\x34\x68\x19\x6a\x98\x8e\xb2\x38\x24\xdd\x30\x7e\x38\x69\x52\xd7\xca\x4b\xb7\xca\x9a\xeb\x4e\xd5\x4a\xf5\xde\xd3\xa8\x32\x89\xd9\x5b\xcc\x43\x78\x93\xd5\xb8\xfa\x89\xde\x77\xce\xee\x47\xad\xcb\x8a\xda\x2e\xaf\x2c\x3e\xbf\x88\xff\xa7\x3b\x51\x95\xbb\x55\xec\xcb\xd9\xb6\xe0\x10\xc3\x52\xeb\x47\xc3\x94\x9e\x86\xa3\x72\xa4\xb4\xb9\x49\x04\x4b\x63\xcd\x47\xa8\xf2\x78\xa5\xb3\xfc\xa8\x27\x22\xf5\xca\x3e\x88\x17\x97\xb0\x2e\xb6\x75\xbb\xf2\x9d\x26\xc9\xc2\x96\x30\x76\x47\xd8\x21\x81\x8f\xf9\x27\x71\xf1\x0d\x4d\x7c\x28\x8f\xa3\xac\xf8\xbc\xc6\xdb\xdf\x21\x0d\xdf\x26\x71\xca\xf2\x76\x78\x48\xa9\xbc\xbb\x67\x24\x7d\x24\xe9\xe9\xcd\x16\xc6\xbe\x38\xd0\x54\x6e\x27\x69\xcc\x62\x3f\x0e\xa7\x86\xc8\x33\xc9\xdd\xcd\xa9\xe0\xba\x2e\x98\x3b\xc6\x92\xec\xad\xa9\xae\x1c\xc5\x16\x98\xc7\x2c\x7b\xcb\xbb\x84\xf6\x25\xe2\x7c\x5b\xee\xaa\xaf\x08\x45\x09\xb9\x02\xa0\xf7\xda\x47\xff\x8f\x64\x73\x27\x0e\xd8\x2c\xe4\xaf\xc1\xb4\x2c\xde\x10\x94\x4b\xbb\x38\x63\x82\x78\xcc\xac\xcd\xc6\xe4\x15\x5c\xe4\x4a\x1c\xf9\x61\x9c\xf1\xce\x94\x23\xdd\x24\x2d\xf8\x5d\x2f\x28\x73\x91\x5b\x5f\xd1\x4c\x19\x26\x81\xd9\xfa\x7e\xae\x27\x4e\x48\xf4\x3a\x35\xcb\x8b\x3a\xf6\x24\xcb\xf0\x43\xc5\x1b\xf5\xa9\x4c\x43\xe1\x1f\x77\xff\xfc\xa5\x9b\xe0\x34\x23\x4d\xd2\x15\xd3\x0c\x6f\x72\xf5\x1d\xc5\x68\x7c\x57\x11\xd3\x53\xfc\xa7\x91\xe4\xca\xcc\xfc\xc3\xa4\xd2\xfa\x2a\x38\xb5\x32\xa9\x41\xf4\x5c\xdb\x8b\xa0\xea\xca\x96\xcf\x69\x7a\x1e\xda\x73\x64\xea\xd1\x7d\xae\x0b\x9c\x30\x96\xc5\xfb\xd3\xe8\x0a\x35\x66\xf1\x59\xf6\x55\xc0\x8a\x3e\x50\x03\x69\xae\xe1\x45\x30\xa5\x82\x65\xbd\xf4\xf3\x00\xe6\xc7\xae\x87\xae\xdc\xbc\x04\x5c\xe2\xcf\xe9\x07\x3a\x63\x66\xc9\x1f\xde\xfe\x1b\x00\x00\xff\xff\x99\x1d\x80\x2c\x5f\x1c\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 7263, mode: os.FileMode(420), modTime: time.Unix(1476599363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJsReconnectingWebsocketMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5d\x6f\xab\x36\x18\xbe\xdf\xaf\x20\x5c\x20\x7b\xc7\x07\x35\xeb\x76\x13\xe4\x55\x55\x1b\x4d\x95\xba\xf6\xa8\xad\xb6\x8b\xaa\x3a\x32\xf6\x1b\xe0\x14\xec\x08\x4c\x7b\xaa\x84\xff\x3e\xd9\x06\x42\x80\xf6\xa6\x93\xa2\x60\xbf\x1f\xf6\xe3\xf7\xe3\xb1\x17\x9b\x5a\x72\x9d\x29\x89\x18\x89\xf1\xce\xef\xa6\x3e\xa5\xfa\x6d\x0b\x6a\xe3\x09\xd8\x64\x12\x82\xc0\x7d\x43\x56\x88\x33\x37\x44\x8f\x4f\x24\xc6\x2b\xbf\x96\x6e\x2e\xfc\x45\xe7\x53\x28\x51\xe7\x10\x04\xee\x1b\xc2\xcf\xad\x2a\x75\x75\x76\x3c\xa5\x31\xc2\x2b\x16\xde\x01\x57\x52\x02\xd7\x99\x4c\xfe\x85\xf8\x5e\xf1\x67\xd0\x46\xd7\x20\x9d\x66\x15\xe9\x01\xe2\x5d\x37\xf4\x18\x8a\x09\x27\x62\x20\xc9\x1d\xfe\x17\x56\x7a\x9c\x0a\xc5\xeb\x02\xa4\x0e\x79\x09\x4c\xc3\xfa\x05\xa4\x46\xfe\x45\x5d\x69\x55\xd8\x89\x8f\xa3\x12\x74\x5d\x4a\x8f\x87\x99\xcc\xf4\x40\x85\x18\x59\x2c\xcd\x2f\xc6\x84\x37\x66\x3d\xa0\x3b\x01\x71\x9d\xac\x16\x4b\xc2\x6a\xad\x0a\xa6\x33\x7e\xbb\x05\xb9\x5a\x9c\x90\xb2\x43\x7f\x25\x35\x94\x2f\x2c\x5f\x2d\xe1\x94\x14\xec\xe7\xdd\x44\x71\x0a\xbf\x1f\xcc\x2f\x81\xb3\xb7\xd5\x32\xfc\x83\xe8\xac\x00\x55\x1f\xcc\x7e\x83\xd3\x26\x12\xfb\x3d\x12\x74\xd7\xe0\x68\xa3\x4a\x64\x50\x6c\xbc\x4c\x7a\x80\x4d\x48\x1e\x37\x4f\x74\x2e\xea\xe2\x71\xf3\x74\x66\xfe\x56\xf0\xb8\x79\x8a\x8c\x69\x58\x97\x39\x8d\x89\x1d\xf6\x7b\x9f\x6b\x0d\xc5\x56\x57\xf4\xa4\x53\x30\xf1\x76\xaf\x99\x06\xda\x27\x20\xbc\xb8\xbd\xb9\x59\x5f\x3c\x5c\xdd\xfc\xe5\x8c\xb6\xa5\xd2\x8a\xab\x9c\xca\x3a\xcf\x23\x83\x28\x25\x09\xb5\x19\xca\xe8\x62\x49\x7e\x98\xbf\xe7\x49\xe8\x73\x28\x6c\xf0\x45\xf6\xe2\xe3\xe8\x39\x64\x42\xd8\x30\x5f\x67\x95\x06\x09\x25\xf2\xd5\x16\xa4\x7f\xc8\x32\xc3\xbb\x24\x54\xd2\x48\x11\xc3\x0d\x26\x73\x3e\x3c\x57\x15\x4c\x9d\xac\xf8\x03\xaf\xbe\xce\x66\x5c\x7b\xdd\xfb\xfe\x05\x54\x15\x4b\x66\xf6\x6d\x15\xef\x7b\x42\x59\xaa\x72\xea\x67\xc5\xce\xcb\xc6\x78\xec\x48\xa7\x6b\x85\x71\x26\x05\x7a\xc6\x5d\xe6\x0a\xf5\x02\x63\x9f\x19\xe9\xb1\x9b\xc8\xaa\x2d\xd3\x3c\xb5\x26\xf4\xf9\x78\x7e\x6c\x6a\xf2\x40\x7b\xdc\x31\xde\xa5\x54\xc2\xab\xd7\xd7\x09\x4a\x4c\x89\x11\xbe\xdf\x3f\x3e\x61\x12\xef\xf7\xa3\xd5\x50\x7e\x14\x77\x8c\x09\x4a\x42\xdb\x4e\xfb\x3d\x73\x83\xf3\x3c\xc7\x41\xc0\x95\xac\x54\x0e\x4e\x84\xfc\x59\x56\xf0\x89\xcf\x5c\xed\x7e\x6d\xb5\x3e\xb1\xfb\x63\x5b\x90\x82\xa6\x04\x68\x05\xfa\xc1\xb5\x14\x1a\x50\xc7\xe7\x76\xed\xa4\x4a\x7e\x6d\xdb\xb5\xdb\xd8\xd4\xfd\x09\x11\xa1\x2b\x3d\x3b\x5d\x36\x24\x09\x47\x5d\x8d\xa3\xb4\x2d\x6a\x3a\x00\xc5\x73\x60\x65\x07\x16\x3e\x1b\x1a\xb7\x7e\x0f\x2c\x39\xb4\x6c\xda\x0f\x49\x32\xdf\xed\xb7\xdf\xd6\x37\x56\x37\xa1\x88\x36\xb2\x79\xdb\xa8\x38\x12\x61\x56\xf5\x10\x68\x4c\x62\xdb\xf8\xa3\xac\x0b\xdc\x90\xb4\xeb\xc8\xc3\x91\x39\xde\x65\x1b\x34\x3e\x76\x6a\x39\x85\x64\xf8\x1d\x70\x17\xd7\xb7\xf7\xeb\xcb\xc9\x1e\x79\xc7\x03\x18\x47\x90\x57\xb0\x7b\xcf\xbd\x67\xb2\xc3\x59\x86\x25\x19\x89\x90\x2b\x01\x94\xdb\x0f\x11\x66\x95\x4a\x49\xca\xdb\x01\x11\xe1\x2b\xab\x2e\x72\x60\x46\xd6\x0d\x67\x8e\x6c\xca\xff\xc7\x7e\x8f\x3e\x9b\xc6\x96\xdd\xda\x3c\x7e\x70\x6c\x57\xf6\x40\x07\x89\xeb\x0a\xee\xd7\xbf\x99\x4e\xc3\xad\x7a\x45\x03\xa5\xbd\x74\xe6\xd2\x8c\xa3\xf9\xae\x99\x31\xfd\xf2\x85\x24\x96\x15\xd0\xe2\x04\x37\x04\xfe\x4c\xc2\xb9\xdb\xee\x6c\x5e\xbc\x02\xdc\xb8\xca\x68\x39\xf3\x88\x5b\x3e\x1b\xb8\x9e\xa0\x1d\x29\xc5\xa1\x60\x9a\xb9\x20\x71\x93\xf5\x4e\x8f\x23\x6e\x55\xd4\x59\x4c\x42\xcc\xdb\xea\xb5\xfc\xfc\xbf\x22\x6c\x2f\x82\x16\xdf\x6c\x72\x9d\x09\x36\x71\x5a\x52\xea\xee\x85\xe1\xab\x23\x08\x7a\x62\x46\x8b\x65\x4b\xd3\x15\x48\x71\x04\x34\xdb\xa0\x14\xbb\x37\xce\xe7\x30\x9b\x95\x07\x80\x53\xbb\x15\x8a\x71\xa4\xd3\x52\xbd\xfa\x57\x37\xff\x9c\x5f\x5f\x5d\x7e\xbf\x7f\x38\x7f\x58\x7f\x5f\xdf\xdd\x79\x2b\xef\x1b\xab\xab\x4c\x26\x9e\x56\x5e\x5f\x3e\xde\x2b\xc4\x95\x5b\xb3\x71\x90\x47\xd4\xe0\x9e\x9f\x87\x57\x4d\xff\xfe\x64\x41\x80\x18\x5d\xc2\x29\x36\x0f\x8d\x13\x92\x06\x41\xda\xd2\xad\xf1\x69\xba\x9b\x70\x53\x42\x95\x0e\xd9\x75\x60\x88\x9b\xa6\x7d\xef\x31\x47\x85\x66\xed\x19\x42\x6e\xc8\xb1\x7e\x84\x71\xc6\xa0\x8f\xd9\x47\x56\x93\x5a\x9f\x9a\x8c\x4a\xcd\x19\x74\xd9\x32\x0c\xcb\x06\x3c\x36\xff\x4c\x63\x96\xc5\xc7\xa4\xce\x2c\x7d\x8e\x9c\x9c\xa4\xd5\xad\x2f\xa7\x5c\xcb\x1a\x1c\xfd\xf2\x5f\x00\x00\x00\xff\xff\xb7\x83\xb6\x2c\x1c\x0c\x00\x00")

func wwwJsReconnectingWebsocketMinJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJsReconnectingWebsocketMinJs,
		"www/js/reconnecting-websocket.min.js",
	)
}

func wwwJsReconnectingWebsocketMinJs() (*asset, error) {
	bytes, err := wwwJsReconnectingWebsocketMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/js/reconnecting-websocket.min.js", size: 3100, mode: os.FileMode(420), modTime: time.Unix(1476401448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/js/reconnecting-websocket.min.js": wwwJsReconnectingWebsocketMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"reconnecting-websocket.min.js": &bintree{wwwJsReconnectingWebsocketMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

