// Code generated by go-bindata.
// sources:
// www/index.html
// www/js/reconnecting-websocket.min.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x6d\x6f\xda\xc8\x13\x7f\x8d\x3f\xc5\xc8\x7d\x51\x20\x01\xaf\x1f\x78\x2a\x38\x12\x06\xfb\xff\xbf\x93\xae\x77\x6a\x7a\xea\x49\x55\x5a\x2d\xf6\x02\xdb\x33\x6b\xe4\x5d\x42\x73\x55\xbe\xfb\x69\x1f\x0c\x0e\xa1\x49\xaa\x5e\x94\x17\xe3\x99\xd9\xdf\xcc\xfc\x66\x66\x6d\x26\x6b\xb1\xc9\x21\xc7\x6c\x15\xda\x84\xd9\x70\x65\x4d\xd6\x04\x67\x57\x56\x63\xb2\x21\x02\x43\xba\xc6\x25\x27\x22\xb4\xff\x7c\x9f\x74\x86\xf6\x41\xcf\xf0\x86\x84\xf6\x2d\x25\xfb\x6d\x51\x0a\x1b\xd2\x82\x09\xc2\x44\x68\xef\x69\x26\xd6\x61\x46\x6e\x69\x4a\x3a\xea\xe1\x12\x28\xa3\x82\xe2\xbc\xc3\x53\x9c\x93\xd0\xb5\xaf\x2c\x00\x80\x09\x4f\x4b\xba\x15\xc0\xcb\x34\xb4\x9d\x2f\xdc\x29\x49\x5a\x30\x46\x52\x41\xd9\xaa\xb3\x27\x0b\x5e\xa4\x7f\x13\xd1\xdd\x50\xd6\xfd\xc2\xed\xab\x89\xa3\x0f\xc8\x1c\x04\x15\x39\xb9\xfa\x8b\x88\x75\xb9\x83\x0f\x64\x01\x73\xb2\x29\xf8\xc4\xd1\x7a\xcb\x9a\x38\xba\x8a\xc9\xa2\xc8\xee\xe4\x81\x14\xb3\x5b\xcc\x81\x66\xa1\x8d\x37\xdb\x9c\x8a\x5d\x46\x3e\x97\x84\x65\xa4\x94\xc8\xda\x7c\xe2\xb8\x5d\x63\x7e\xce\x69\x52\xe5\x61\x35\x6e\x71\x09\xab\x12\x67\x94\x30\x01\x21\x7c\xb4\x5f\x21\xe4\xba\x49\x62\x5f\x82\xfd\x0a\x25\x2e\x4a\x90\x12\xdd\x18\x25\xb1\xab\x44\x6f\x8e\xe2\xb9\xa7\x44\x7f\x86\xe6\x33\x5f\x89\x41\x84\xa2\x48\x8b\xbd\x29\x9a\x4e\x03\x25\xf6\x47\x68\x3a\xea\x2b\x71\x30\x44\xa3\xe1\x40\x89\xc3\x01\x1a\x0e\x86\x4a\x1c\xf5\xd1\xa0\x3f\x52\xe2\xb4\x87\x7a\x3d\x2d\x46\x01\x0a\x82\xa9\x12\x67\x3e\x0a\xfc\x99\x12\xe7\x1e\xf2\xbd\xb9\x12\x63\x17\x79\x6e\xac\xc4\x04\x21\x17\xe9\x7c\x93\x04\x21\x84\x2a\x6d\x82\x7a\xc6\xd7\x8d\xd1\xd4\x20\x78\x73\xe3\x3b\xf3\xfd\x99\xab\x93\x8c\xfc\x20\x72\x4d\x0e\x41\x6f\x6a\x70\x47\xfd\xfe\xc8\xf3\x4d\xbe\x83\xa1\x37\x34\x55\x0c\x07\x26\x87\xfe\x68\xd4\xf7\x35\x0f\xbd\xd1\xb4\xe7\xeb\xda\x82\x69\x54\xe5\xeb\xcf\x66\x7e\x50\x71\x36\xf7\x82\xbe\x61\x32\x76\x83\xc8\xf0\x9b\xa0\x9e\xce\x17\xa1\x24\xe9\xf5\x2a\xed\xbc\x57\xb1\x9e\x44\xc6\xd7\x9b\x27\x23\x83\xe0\xcf\x92\x81\xc1\x0d\xa2\xa4\xef\x47\x86\xf5\x24\xf0\xfb\x26\xb3\xc4\x33\x99\x0d\x86\x09\x32\xf9\x0e\x07\x71\xe2\x55\xac\xc7\x73\x53\xdb\xb4\x17\x47\xee\xdc\xb0\x1e\x8f\xdc\xa1\x61\x27\x1e\x1a\x76\xe6\x5e\xdc\x37\x9c\xc5\x6e\x1c\x18\x26\x13\x14\x7b\x86\xdf\x24\x89\x5d\x84\xec\x1b\xcb\x6a\x38\x0e\xfc\x8f\x08\x30\x23\x38\x93\x2b\xf5\x55\x58\x0d\xbc\xd9\x1a\x55\x08\x59\x91\xee\x36\x84\x89\xee\x8a\x88\x38\x27\x52\x8c\xee\x7e\xc9\x9a\xaf\x4f\xa7\xfa\x75\x6b\xac\x4f\x8a\xaf\x10\xc2\x01\x42\x9e\x33\xc0\xcd\xd7\x5e\x26\xbd\xac\x86\x1a\xf4\xe7\x43\xd4\xf7\x41\xc1\xeb\x73\x2a\x40\x0d\xe2\x6c\x08\xb9\x28\x6f\x8b\x72\x83\x73\xca\xc9\xb4\x2c\xf1\x9d\x5c\x97\x9b\xb1\xd5\x58\xee\x58\x2a\x68\xc1\x8e\xe6\x66\x0b\xbe\x59\x0d\x75\xa4\x58\x2e\x39\x91\x9b\x85\xba\x81\x51\x2d\x4b\xbc\x21\x9c\xfe\x43\x94\x16\x49\xf5\xb2\x28\xa1\x29\x6d\x14\x42\x04\x63\xa0\x93\x9e\x37\x06\x7a\x71\xd1\x92\x38\x8d\x87\x71\x3f\xd2\x9b\x10\x9a\x1a\xf8\x53\xd0\x82\x0b\x08\xda\x07\xcc\x36\x6d\x57\x26\xbf\x05\x1d\xe8\x1f\x1e\xbd\x56\xbb\x79\x70\xfb\xe4\x49\x63\xd0\xa6\x6d\x6d\xad\x9b\x7c\x09\x59\x7b\x0e\x24\x53\x8d\x7b\x4b\xfe\xd7\x4a\xb4\x6a\x95\x6b\x4a\xa7\x9b\x6d\x33\xc3\x02\xeb\xea\x75\xeb\xba\x86\x52\x75\x91\x02\x84\xb0\xa7\x2c\x2b\xf6\x5d\xca\x18\x29\x3f\x48\x65\xa7\x87\xc6\x8f\xdc\xd7\x84\xae\xd6\xe2\xd4\xff\xff\x4a\xeb\xf8\x75\xff\x9c\xe0\xf2\x1d\x49\x45\x13\x5d\x02\xba\xac\xcd\x89\xb9\xba\x8f\x0a\x8d\xa9\x8a\x59\xe0\x52\x0d\x0a\x16\xb8\x9b\x13\xb6\x12\x6b\xd9\xe2\x07\x6d\x00\x34\x06\x0a\x13\x90\xae\xba\x15\xaa\x2a\x39\xe2\x69\xb1\x91\x33\x05\xc5\x4e\x00\x23\x5f\x05\xe4\x94\x11\xa0\x4b\xb8\x2b\x76\x90\x15\x4c\xc0\x1e\x33\x01\xae\x13\x88\x35\x6c\x8b\x3d\x29\x81\x55\xbc\x65\x70\x98\x73\x89\x26\x33\x50\xfd\xec\x18\xa9\xfd\xa8\xd7\xed\x2e\xf2\x64\xce\x32\xe9\xcf\x72\x52\x29\xb4\x4f\xcb\x74\x54\x96\x95\x93\xe6\x3a\x84\xe6\x39\xaf\x56\xe7\x88\x66\x58\xae\x45\x3f\x65\xcb\xd1\xcd\xa9\xd8\x5e\xd2\x3c\xbf\x16\x77\xb9\x1c\xdd\xea\xad\xf1\x91\xde\x9c\x78\xa8\x76\xa8\x6c\x1f\xd3\x7f\x09\x87\x0c\xb5\x58\xeb\x8a\x1a\xb1\x47\x53\xf5\x87\x5c\xcc\xda\x5c\x55\x3b\xfb\xe2\xc9\x3a\x3d\xf0\xfc\x6c\x1d\x4f\x9c\x4c\x57\xfd\x92\x30\x35\xd4\x55\xff\xcd\x84\xd5\xfb\xfc\x28\xe0\x77\x3a\x7d\xde\xef\x6c\xaf\x7f\xc3\x62\xdd\xe5\x94\x35\x4d\xcf\x5b\xed\xbe\xee\xf1\xa1\xea\x27\xba\xfc\xc0\xa7\xde\xe7\xc7\x34\x38\xde\x0b\x7a\xed\x38\xf0\x7e\x4d\x39\xac\x88\xe0\x90\xe2\x3c\x27\x19\x90\x5b\x52\xde\x81\xa0\x1b\x02\x7b\x22\x2d\xc0\xc8\x1e\x16\x98\x93\x05\x66\x99\xa2\xb4\x36\x24\x11\xe6\x24\xc2\x2c\x4b\x76\x2c\x6d\x56\x4e\x9a\x49\xb5\xaa\x8c\x17\x39\xe9\xe6\xc5\xea\x68\xb4\x1a\x8d\xe3\x85\x55\x69\xbb\x87\xbd\x3c\xda\xf5\xe8\x1d\x3c\x54\x8d\xad\x1f\x4d\xbc\x24\x7c\x4b\x4b\xac\x92\x3d\xc9\xfd\xdd\xd1\xa4\xd2\xaf\xb9\xca\x0a\x7e\x34\x12\xcf\x09\xd9\x9e\xc6\xb8\x96\x4a\x85\xae\xcc\x67\x99\xd1\x16\x15\x4e\xc5\xbb\x26\x62\xb7\x95\x5f\xa5\xfa\x03\x56\xbd\xc9\xd5\x67\x6d\xc1\xf8\xe1\x25\x2f\xd6\x04\x76\x65\xfe\x46\x7e\x3e\x43\xb1\x34\xcf\x54\xbf\x29\x39\x29\x6f\x49\x79\x5c\xb1\xbc\x48\x55\x59\x63\x6d\xde\x96\x85\x28\xd2\x22\x1f\x5b\x0d\xba\x84\xa6\xf6\xee\x56\x5a\x08\xc3\x10\xec\xb5\x10\x5b\xfe\xc6\x36\x4b\x7f\x30\x81\xbd\xe7\xfc\x8d\x3d\xb6\x1a\xf7\x40\x72\x4e\xce\x98\xb5\xd5\xbc\xb3\x0f\x73\x13\x2a\x8e\xde\xd5\x3e\xd1\x3f\x90\xc5\xb5\x2a\xb0\x79\x38\x7f\x01\xb6\xe3\xd8\x70\x61\x0a\xe8\xae\x0b\x2e\x94\x72\xcf\x9d\xc5\xc2\x96\xa3\x7b\x18\x87\x82\xa5\x79\xc1\xe5\x92\x54\x64\x37\x49\x0b\xbe\xd5\x89\xb5\xa3\x2a\xfa\x9c\x72\x13\x98\x64\x76\xeb\xfe\x21\x4e\xb1\x25\xec\x65\x30\xb3\xef\x62\x6c\x08\xe7\x78\xf5\x28\x1b\xf3\xcd\x51\x63\xe1\xd7\xeb\xdf\xdf\x76\xb7\xf2\x47\x51\x93\x74\xd5\xb5\x2a\xf7\xf1\xfc\x1a\x59\x8d\x7b\xd3\xb1\xfa\x14\xff\x34\x93\x12\x4c\x71\x59\x43\x7d\x11\x9d\xb5\x85\x39\xc3\xe8\x43\xb4\x67\x49\xad\x83\xcd\x9e\x42\x7a\x9a\xda\x87\xcc\x9c\x67\xf7\xa9\x45\x3f\x72\xac\xf7\xf7\xa7\xd9\x55\x30\x8a\x5e\x25\xbd\x88\x58\x75\x4b\x9c\xa1\xb4\x42\x78\x96\x4c\x0d\x30\x3b\x7f\xfa\x69\x02\xab\xb2\xcf\x53\x77\x7a\x7f\x29\xba\xd4\xdf\xf1\xe7\xb4\x35\x71\xf4\xcf\xe4\x7f\x03\x00\x00\xff\xff\xbf\xbb\x1a\xe7\x0d\x10\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 4109, mode: os.FileMode(420), modTime: time.Unix(1476448106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJsReconnectingWebsocketMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5d\x6f\xab\x36\x18\xbe\xdf\xaf\x20\x5c\x20\x7b\xc7\x07\x35\xeb\x76\x13\xe4\x55\x55\x1b\x4d\x95\xba\xf6\xa8\xad\xb6\x8b\xaa\x3a\x32\xf6\x1b\xe0\x14\xec\x08\x4c\x7b\xaa\x84\xff\x3e\xd9\x06\x42\x80\xf6\xa6\x93\xa2\x60\xbf\x1f\xf6\xe3\xf7\xe3\xb1\x17\x9b\x5a\x72\x9d\x29\x89\x18\x89\xf1\xce\xef\xa6\x3e\xa5\xfa\x6d\x0b\x6a\xe3\x09\xd8\x64\x12\x82\xc0\x7d\x43\x56\x88\x33\x37\x44\x8f\x4f\x24\xc6\x2b\xbf\x96\x6e\x2e\xfc\x45\xe7\x53\x28\x51\xe7\x10\x04\xee\x1b\xc2\xcf\xad\x2a\x75\x75\x76\x3c\xa5\x31\xc2\x2b\x16\xde\x01\x57\x52\x02\xd7\x99\x4c\xfe\x85\xf8\x5e\xf1\x67\xd0\x46\xd7\x20\x9d\x66\x15\xe9\x01\xe2\x5d\x37\xf4\x18\x8a\x09\x27\x62\x20\xc9\x1d\xfe\x17\x56\x7a\x9c\x0a\xc5\xeb\x02\xa4\x0e\x79\x09\x4c\xc3\xfa\x05\xa4\x46\xfe\x45\x5d\x69\x55\xd8\x89\x8f\xa3\x12\x74\x5d\x4a\x8f\x87\x99\xcc\xf4\x40\x85\x18\x59\x2c\xcd\x2f\xc6\x84\x37\x66\x3d\xa0\x3b\x01\x71\x9d\xac\x16\x4b\xc2\x6a\xad\x0a\xa6\x33\x7e\xbb\x05\xb9\x5a\x9c\x90\xb2\x43\x7f\x25\x35\x94\x2f\x2c\x5f\x2d\xe1\x94\x14\xec\xe7\xdd\x44\x71\x0a\xbf\x1f\xcc\x2f\x81\xb3\xb7\xd5\x32\xfc\x83\xe8\xac\x00\x55\x1f\xcc\x7e\x83\xd3\x26\x12\xfb\x3d\x12\x74\xd7\xe0\x68\xa3\x4a\x64\x50\x6c\xbc\x4c\x7a\x80\x4d\x48\x1e\x37\x4f\x74\x2e\xea\xe2\x71\xf3\x74\x66\xfe\x56\xf0\xb8\x79\x8a\x8c\x69\x58\x97\x39\x8d\x89\x1d\xf6\x7b\x9f\x6b\x0d\xc5\x56\x57\xf4\xa4\x53\x30\xf1\x76\xaf\x99\x06\xda\x27\x20\xbc\xb8\xbd\xb9\x59\x5f\x3c\x5c\xdd\xfc\xe5\x8c\xb6\xa5\xd2\x8a\xab\x9c\xca\x3a\xcf\x23\x83\x28\x25\x09\xb5\x19\xca\xe8\x62\x49\x7e\x98\xbf\xe7\x49\xe8\x73\x28\x6c\xf0\x45\xf6\xe2\xe3\xe8\x39\x64\x42\xd8\x30\x5f\x67\x95\x06\x09\x25\xf2\xd5\x16\xa4\x7f\xc8\x32\xc3\xbb\x24\x54\xd2\x48\x11\xc3\x0d\x26\x73\x3e\x3c\x57\x15\x4c\x9d\xac\xf8\x03\xaf\xbe\xce\x66\x5c\x7b\xdd\xfb\xfe\x05\x54\x15\x4b\x66\xf6\x6d\x15\xef\x7b\x42\x59\xaa\x72\xea\x67\xc5\xce\xcb\xc6\x78\xec\x48\xa7\x6b\x85\x71\x26\x05\x7a\xc6\x5d\xe6\x0a\xf5\x02\x63\x9f\x19\xe9\xb1\x9b\xc8\xaa\x2d\xd3\x3c\xb5\x26\xf4\xf9\x78\x7e\x6c\x6a\xf2\x40\x7b\xdc\x31\xde\xa5\x54\xc2\xab\xd7\xd7\x09\x4a\x4c\x89\x11\xbe\xdf\x3f\x3e\x61\x12\xef\xf7\xa3\xd5\x50\x7e\x14\x77\x8c\x09\x4a\x42\xdb\x4e\xfb\x3d\x73\x83\xf3\x3c\xc7\x41\xc0\x95\xac\x54\x0e\x4e\x84\xfc\x59\x56\xf0\x89\xcf\x5c\xed\x7e\x6d\xb5\x3e\xb1\xfb\x63\x5b\x90\x82\xa6\x04\x68\x05\xfa\xc1\xb5\x14\x1a\x50\xc7\xe7\x76\xed\xa4\x4a\x7e\x6d\xdb\xb5\xdb\xd8\xd4\xfd\x09\x11\xa1\x2b\x3d\x3b\x5d\x36\x24\x09\x47\x5d\x8d\xa3\xb4\x2d\x6a\x3a\x00\xc5\x73\x60\x65\x07\x16\x3e\x1b\x1a\xb7\x7e\x0f\x2c\x39\xb4\x6c\xda\x0f\x49\x32\xdf\xed\xb7\xdf\xd6\x37\x56\x37\xa1\x88\x36\xb2\x79\xdb\xa8\x38\x12\x61\x56\xf5\x10\x68\x4c\x62\xdb\xf8\xa3\xac\x0b\xdc\x90\xb4\xeb\xc8\xc3\x91\x39\xde\x65\x1b\x34\x3e\x76\x6a\x39\x85\x64\xf8\x1d\x70\x17\xd7\xb7\xf7\xeb\xcb\xc9\x1e\x79\xc7\x03\x18\x47\x90\x57\xb0\x7b\xcf\xbd\x67\xb2\xc3\x59\x86\x25\x19\x89\x90\x2b\x01\x94\xdb\x0f\x11\x66\x95\x4a\x49\xca\xdb\x01\x11\xe1\x2b\xab\x2e\x72\x60\x46\xd6\x0d\x67\x8e\x6c\xca\xff\xc7\x7e\x8f\x3e\x9b\xc6\x96\xdd\xda\x3c\x7e\x70\x6c\x57\xf6\x40\x07\x89\xeb\x0a\xee\xd7\xbf\x99\x4e\xc3\xad\x7a\x45\x03\xa5\xbd\x74\xe6\xd2\x8c\xa3\xf9\xae\x99\x31\xfd\xf2\x85\x24\x96\x15\xd0\xe2\x04\x37\x04\xfe\x4c\xc2\xb9\xdb\xee\x6c\x5e\xbc\x02\xdc\xb8\xca\x68\x39\xf3\x88\x5b\x3e\x1b\xb8\x9e\xa0\x1d\x29\xc5\xa1\x60\x9a\xb9\x20\x71\x93\xf5\x4e\x8f\x23\x6e\x55\xd4\x59\x4c\x42\xcc\xdb\xea\xb5\xfc\xfc\xbf\x22\x6c\x2f\x82\x16\xdf\x6c\x72\x9d\x09\x36\x71\x5a\x52\xea\xee\x85\xe1\xab\x23\x08\x7a\x62\x46\x8b\x65\x4b\xd3\x15\x48\x71\x04\x34\xdb\xa0\x14\xbb\x37\xce\xe7\x30\x9b\x95\x07\x80\x53\xbb\x15\x8a\x71\xa4\xd3\x52\xbd\xfa\x57\x37\xff\x9c\x5f\x5f\x5d\x7e\xbf\x7f\x38\x7f\x58\x7f\x5f\xdf\xdd\x79\x2b\xef\x1b\xab\xab\x4c\x26\x9e\x56\x5e\x5f\x3e\xde\x2b\xc4\x95\x5b\xb3\x71\x90\x47\xd4\xe0\x9e\x9f\x87\x57\x4d\xff\xfe\x64\x41\x80\x18\x5d\xc2\x29\x36\x0f\x8d\x13\x92\x06\x41\xda\xd2\xad\xf1\x69\xba\x9b\x70\x53\x42\x95\x0e\xd9\x75\x60\x88\x9b\xa6\x7d\xef\x31\x47\x85\x66\xed\x19\x42\x6e\xc8\xb1\x7e\x84\x71\xc6\xa0\x8f\xd9\x47\x56\x93\x5a\x9f\x9a\x8c\x4a\xcd\x19\x74\xd9\x32\x0c\xcb\x06\x3c\x36\xff\x4c\x63\x96\xc5\xc7\xa4\xce\x2c\x7d\x8e\x9c\x9c\xa4\xd5\xad\x2f\xa7\x5c\xcb\x1a\x1c\xfd\xf2\x5f\x00\x00\x00\xff\xff\xb7\x83\xb6\x2c\x1c\x0c\x00\x00")

func wwwJsReconnectingWebsocketMinJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJsReconnectingWebsocketMinJs,
		"www/js/reconnecting-websocket.min.js",
	)
}

func wwwJsReconnectingWebsocketMinJs() (*asset, error) {
	bytes, err := wwwJsReconnectingWebsocketMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/js/reconnecting-websocket.min.js", size: 3100, mode: os.FileMode(420), modTime: time.Unix(1476401448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/js/reconnecting-websocket.min.js": wwwJsReconnectingWebsocketMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"reconnecting-websocket.min.js": &bintree{wwwJsReconnectingWebsocketMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

