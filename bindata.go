// Code generated by go-bindata.
// sources:
// www/index.html
// www/js/reconnecting-websocket.min.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x79\x6f\xdb\x38\x16\xff\xdb\xfa\x14\x0f\xea\x1f\xb1\x9d\xd8\xa2\x0e\x5f\xb5\x15\xc0\x97\xf6\x00\x66\x76\xd1\x76\xd0\x05\x8a\xb4\xa0\x25\xc6\xe6\x54\xa6\x04\x89\x8e\x9b\x1d\xf4\xbb\x2f\x78\x48\x66\x2c\x37\x49\x31\x8b\xc9\x01\x3c\xbd\x9b\xbf\xc7\xf7\x48\x69\xb6\xe3\xfb\x14\x52\xcc\xb6\xa1\x4d\x98\x0d\xb7\xd6\x6c\x47\x70\x72\x6b\xb5\x66\x7b\xc2\x31\xc4\x3b\x5c\x94\x84\x87\xf6\x6f\x1f\xa2\xde\xd8\xae\xf9\x0c\xef\x49\x68\x3f\x50\x72\xcc\xb3\x82\xdb\x10\x67\x8c\x13\xc6\x43\xfb\x48\x13\xbe\x0b\x13\xf2\x40\x63\xd2\x93\x0f\x37\x40\x19\xe5\x14\xa7\xbd\x32\xc6\x29\x09\x5d\xfb\xd6\x02\x00\x98\x95\x71\x41\x73\x0e\x65\x11\x87\xb6\xf3\x7b\xe9\x14\x24\xce\x18\x23\x31\xa7\x6c\xdb\x3b\x92\x4d\x99\xc5\x5f\x09\xef\xef\x29\xeb\xff\x5e\xda\xb7\x33\x47\x19\x88\x1c\x38\xe5\x29\xb9\xfd\x0f\xe1\xbb\xe2\x00\x1f\xc9\x06\x56\x64\x9f\x95\x33\x47\xf1\x2d\x6b\xe6\xa8\x55\xcc\x36\x59\xf2\x28\x0c\x28\xcb\x0f\x1c\x68\x12\xda\x6b\x86\x37\x29\x59\xa6\x07\xce\x49\xf1\x0b\xce\x17\x07\xce\x33\x66\x03\x7f\xcc\x49\x68\x6f\xf4\xd3\x03\x4e\x0f\x24\xb4\x4f\x6a\x36\x64\x2c\x4e\x69\xfc\xb5\xe9\xa1\xdd\x99\xda\xb7\x96\xd5\x9a\xc5\x98\x3d\xe0\x52\x46\x29\x48\x99\x7f\x29\x08\x4b\x48\x21\x32\x57\x92\x73\x25\xbc\xcf\x53\xca\x0f\x09\x79\x51\x33\xdf\xe1\xf2\xa2\xd6\xac\xc6\xe4\x01\x17\x10\xd7\x39\xa9\x1c\x13\x08\xe1\x1e\xa7\x25\x51\xe2\x6d\x81\x13\x4a\x18\x87\x10\x3e\xd9\x6f\x10\x72\xdd\x28\xb2\x6f\xc0\x7e\x83\x22\x17\x45\x48\x92\xee\x1a\x45\x6b\x57\x92\xde\x0a\xad\x57\x9e\x24\xfd\x25\x5a\x2d\x7d\x49\x06\x0b\xb4\x58\x28\x72\x30\x47\xf3\x79\x20\xc9\xe1\x04\xcd\x27\x43\x49\x8e\xc6\x68\x32\x1e\x49\x72\x3c\x42\xe3\xd1\x58\x92\x93\x21\x1a\x0d\x27\x92\x9c\x0f\xd0\x60\xa0\xc8\x45\x80\x82\x60\x2e\xc9\xa5\x8f\x02\x7f\x29\xc9\x95\x87\x7c\x6f\x25\xc9\xb5\x8b\x3c\x77\x2d\xc9\x08\x21\x17\xa9\x7c\xa3\x08\x21\x84\x2a\x6e\x84\x06\x5a\xd7\x5d\xa3\xb9\xf6\xe0\xad\xb4\xee\xd2\xf7\x97\xae\x4a\x72\xe1\x07\x0b\x57\xe7\x10\x0c\xe6\xda\xef\x64\x38\x9c\x78\xbe\xce\x77\x34\xf6\xc6\x7a\x15\xe3\x91\xce\x61\x38\x99\x0c\x7d\x85\xc3\x60\x32\x1f\xf8\x6a\x6d\xc1\x7c\x51\xe5\xeb\x2f\x97\x7e\x50\x61\xb6\xf2\x82\xa1\x46\x72\xed\x06\x0b\x8d\x6f\x84\x06\x2a\x5f\x84\xa2\x68\x30\xa8\xb8\xab\x41\x85\x7a\xb4\xd0\xba\xde\x2a\x9a\x68\x0f\xfe\x32\x1a\x69\xbf\xc1\x22\x1a\xfa\x0b\x8d\x7a\x14\xf8\x43\x9d\x59\xe4\xe9\xcc\x46\xe3\x08\xe9\x7c\xc7\xa3\x75\xe4\x55\xa8\xaf\x57\x7a\x6d\xf3\xc1\x7a\xe1\xae\x34\xea\xeb\x89\x3b\xd6\xe8\xac\xc7\x1a\x9d\x95\xb7\x1e\x6a\xcc\xd6\xee\x3a\xd0\x48\x46\x68\xed\x69\x7c\xa3\x68\xed\x22\x64\xdf\x59\x56\xcb\x71\xe0\x6f\x84\x83\xde\xa1\x4b\xd1\xfc\xdf\xb8\xd5\xc2\xfb\x5c\xb3\x42\x48\xb2\xf8\xb0\x27\x8c\xf7\xb7\x84\xaf\x53\x22\xc8\xc5\xe3\x3f\x92\xf6\xd5\xf9\xae\xbf\xea\x4c\x95\x25\xff\x06\x21\xd4\x2e\x84\x9d\x76\xdc\xbe\xf2\x12\xa1\x65\xb5\x64\x1f\xbc\x1c\xc2\x6c\x17\xe9\x5e\xd9\xc9\x00\x86\x8b\x8b\x21\x44\xe7\xbe\x1c\xc1\xe8\x6f\x19\x40\x5a\x49\xff\x27\xfb\x8b\xee\x45\x1f\xfe\x9a\x15\x7b\x9c\xd2\x92\xcc\x8b\x02\x3f\x8a\x6e\xbc\x9b\x5a\xad\xfb\x03\x8b\x39\xcd\xd8\x49\xdc\xee\xc0\x1f\x56\x4b\x9a\x64\xf7\xf7\x25\x11\x8d\x8b\xfa\x81\x66\xdd\x17\x78\x4f\x4a\xfa\x5f\x22\xb9\x48\xb0\xef\xb3\x02\xda\x42\x46\x21\x44\x30\x05\x3a\x1b\x78\x53\xa0\xd7\xd7\x1d\xe1\xa7\xf5\x34\xee\x27\x7a\x17\x42\x5b\x39\xfe\x1c\x74\xe0\x1a\x82\x6e\xed\xb3\x4b\xbb\x95\xc8\xef\x40\x0f\x86\xf5\xa3\xd7\xe9\xb6\x6b\xb5\xcf\x9e\x10\x06\x5d\xda\x55\x52\x53\xe4\x0b\x97\xc6\x73\x20\x70\x6a\x7d\xb7\xc4\x9f\xb1\x44\xcb\x58\x79\x73\xb2\x4a\x00\x9a\x63\xed\x73\x08\xbc\x38\x10\xe1\x4b\x41\x7a\xb2\x11\x70\xa2\x9b\xbf\xe4\xf7\x6e\x6a\x26\xff\x5b\x9e\x60\x6e\x26\x5f\x6f\xf4\x1b\x38\x12\xba\xdd\x71\xb5\x9a\x66\x91\xa0\xd6\xec\xa7\x84\x6d\xf9\xce\xa8\xd9\xc9\x9f\xac\xd7\x93\xc7\x6e\xdb\xed\x55\x9e\xaf\xe1\x14\x4f\x88\x34\xbf\x42\xdc\xc8\x53\xed\xda\xf9\x3e\x6f\x27\x98\x63\x95\x93\x6a\xbf\xbe\xde\xb7\xf2\xd8\x06\x08\xe1\x48\x59\x92\x1d\xfb\x94\x31\x52\x7c\x14\xcc\xde\x00\x4d\x1b\xea\x3b\x19\xea\x5c\xff\xef\x92\xeb\xf8\xa6\x7e\x4a\x70\xf1\x8e\xc4\xbc\x8d\x6e\x00\xdd\x18\xbd\xae\x2f\x0a\x27\x86\xf2\x29\x77\xcc\x06\x17\xb2\x15\x31\xc7\x15\x3c\xd6\x19\x8c\x80\xa6\x40\x61\x06\x42\x55\x61\x27\x57\x25\xc6\x54\x9c\xed\x45\xd7\x42\x76\xe0\xc0\xc8\x37\x0e\x29\x65\x04\xe8\x3d\x3c\x66\x07\x48\x32\xc6\xe1\x88\x19\x07\xd7\x09\xf8\x0e\xf2\xec\x48\x0a\x60\xd5\xe6\x4c\x4e\x85\x11\xde\x44\x06\xaa\x69\x7a\x9a\xec\x36\x3a\xaa\xd3\xed\x23\x4f\x64\x2d\xd2\xfe\x22\xe6\x01\x85\xee\xf9\x42\x1d\x99\x67\xa5\xa4\xd0\x0e\x65\xfd\x1a\x5a\x9d\xde\xc9\x9b\xc6\x39\x84\x3a\xfc\x39\x5e\x8e\x2a\x4f\x85\xf7\x3d\x4d\xd3\xf7\xfc\x31\x15\x13\xa2\x3a\xfb\x3f\xd1\xbb\x33\x0d\x59\x10\x99\x6d\xb3\x00\x37\x50\x67\xa8\x48\xa3\x2e\x97\xf7\xd5\xbf\xc5\x78\x35\x76\x56\x35\x79\x5f\xbd\xb7\xce\x0d\x5e\xde\x5d\x27\x8b\xb3\xfd\x65\x8e\x7a\xbd\x06\x93\xf5\xff\xd9\x63\x66\x9d\x1b\x01\x7f\x50\xe9\xcb\x7a\x17\x6b\xfd\x0b\xe6\xbb\x7e\x49\x59\x5b\xd7\xbc\xd3\x1d\xaa\x1a\xd7\xab\x7e\xa6\xca\x4f\x74\xcc\x3a\x37\x61\x70\xbc\x9f\xaf\xf5\x3b\x52\xe6\xb4\xc0\x82\x63\x54\x5c\x1f\x85\xaf\x2e\xf8\x99\xfe\xb3\xf5\xf6\x9e\x5a\x9c\xd5\xdb\x38\x7a\xf5\x32\x0c\x8e\xb1\x9a\xca\xde\x44\xee\xea\x4d\x14\x0d\x46\xbe\x7f\x35\x05\xc7\x81\x65\x96\x66\xe2\xd0\x05\xbe\x23\xb2\xe2\xd6\xa9\xd0\xed\x4b\x0b\x74\xbc\x6a\x1f\x7d\x11\x07\xfa\xc0\x7a\x5a\x71\xd9\xb1\xfd\x7d\xf6\x20\xaf\x10\xdd\x01\xb2\xce\xca\x7c\x19\x84\x9e\x8b\xce\xd2\x35\x8b\x28\x83\x3d\x57\xb5\xda\x30\x63\x3f\x8c\xe1\x78\x70\x0d\x76\xce\x61\x5e\x50\x9c\xda\xa6\x99\xb8\xb8\xcc\x53\xba\x65\x10\x82\x1d\x13\xc6\x49\xd1\x90\x2f\x70\x49\xe4\x44\x0d\xc1\xde\xd3\x24\x49\x89\xfd\x43\x84\x37\x29\x8e\xbf\x5e\x09\xb1\xb0\x14\x16\x25\xc7\x9c\xbc\x05\x1b\xae\x55\xeb\xc9\x67\x91\x0f\x14\xf9\xde\xe0\x17\xf9\x5e\x72\x13\x5a\x72\xcc\x62\xd3\xa4\x62\xf5\x79\x16\xd1\x6f\x24\x69\x7b\x8d\x12\x7f\x10\x17\x30\x11\xf2\xe6\x1c\x02\x5d\xba\x06\xbf\x82\x46\xb8\xfa\xae\xae\xbb\x1f\x76\xb4\x84\x2d\xe1\x25\xc4\x38\x15\x57\x10\xf2\x40\x8a\x47\xe0\x74\x4f\xe0\x48\x84\x04\x18\x39\xc2\x06\x97\x64\x83\x59\x22\x93\x33\x1a\x46\xe0\xb4\xc0\x2c\x89\x0e\x2c\x6e\x57\x4a\xaa\x5f\xe4\x21\xc5\xca\x2c\x25\xfd\x34\xdb\x9e\x84\x56\xab\x45\xef\xa1\xdd\xb8\xfc\xe8\xb9\xd3\xb8\x6e\x54\x86\x7d\xe3\xde\x81\xfa\x68\x20\x1c\x5d\xba\x74\x34\xf5\x9b\xb7\x8f\x56\x53\x49\x9e\x80\x72\x2a\xe1\x4d\x79\x21\xe8\x27\x7a\xd7\x7b\x72\x4b\xe9\xfc\xd8\x51\x37\x14\x8d\x22\xa6\x8b\xfc\x3f\xdd\x4c\x9a\xda\x9d\x5a\xae\x4e\x98\x5a\x43\x8e\xb2\xce\xcf\xd6\xa9\x38\x8d\xae\xf3\x52\x19\x53\x4d\x56\xcb\x50\xad\x06\xdc\xf9\xf0\x33\x55\x7e\x36\x93\x32\x25\x24\x3f\xcf\xe1\xbd\x60\xca\xe8\x52\x7c\x71\xa3\x28\x89\x0c\x27\xe3\xbd\x27\xfc\x90\xc3\xc7\xea\xbb\x89\x7c\x2d\x93\x5f\x53\x32\x56\xd6\x6f\x6c\x62\x9e\x1d\x8a\xf4\x6d\x9e\x15\xbc\x9a\x6f\x87\x82\xaa\x4b\x74\x49\x8a\x07\x52\x9c\x26\x6f\x9a\xc5\x72\x4d\x53\x25\xce\x8b\x8c\x67\x71\x96\x4e\x2d\xb9\x31\x95\x76\xbf\xe2\x42\x18\x86\x60\xef\x38\xcf\xcb\xb7\xb6\x3e\xfb\x6b\x11\xd8\xc7\xb2\x7c\x2b\x46\xc3\x77\x20\x69\x49\x2e\x88\x95\x54\x5f\xe7\xeb\x36\x0a\x25\x46\xef\x8c\x2f\x43\x1f\xc9\xe6\xbd\x5c\x60\xbb\xb6\xbf\x06\xdb\x71\xc4\x44\xd0\x29\xed\xb2\x92\x4b\xe6\xb1\x74\x36\x1b\x5b\x74\x71\xbd\x5d\x32\x16\xa7\x59\x29\xe6\x51\x05\x76\x9b\x74\xe0\x0f\x13\x58\x7b\x51\x45\x5f\xd1\x52\x07\x26\x89\xdd\xf9\xfe\xd4\x4f\x96\x13\xf6\x3a\x37\xcb\x1f\xfa\xd8\x93\xb2\xc4\xdb\x46\x36\xfa\x0d\xcf\x40\xe1\x9f\xef\xff\xf5\x6b\x3f\xc7\x45\x49\xda\xa4\x2f\xcf\x5a\x31\xe5\x2e\x4f\x15\xab\xf5\x5d\x57\xcc\xdc\xe5\x7f\x1a\x49\xe1\xcc\xae\xde\x75\xb5\xd7\x57\xc1\x69\x74\xca\x05\x44\x9f\x7a\x7b\x11\x54\xd3\xd9\xf2\x39\x4f\xcf\x43\xfb\x14\x99\xcb\xe8\x3e\x37\x08\x4e\x18\xab\xfe\xfd\xd3\xe8\x4a\x37\x12\x5e\x49\xbd\x0a\x58\x39\x25\x2e\x40\x5a\x79\x78\x11\x4c\xe5\x60\x79\xd9\xfa\x79\x00\xab\x65\x5f\x86\xee\x7c\x7e\x49\xb8\xe4\xcf\xe9\x2b\xae\x35\x73\xd4\xd7\xd9\xff\x05\x00\x00\xff\xff\xeb\xca\x9b\x7d\x84\x16\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 5764, mode: os.FileMode(420), modTime: time.Unix(1476454352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwJsReconnectingWebsocketMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5d\x6f\xab\x36\x18\xbe\xdf\xaf\x20\x5c\x20\x7b\xc7\x07\x35\xeb\x76\x13\xe4\x55\x55\x1b\x4d\x95\xba\xf6\xa8\xad\xb6\x8b\xaa\x3a\x32\xf6\x1b\xe0\x14\xec\x08\x4c\x7b\xaa\x84\xff\x3e\xd9\x06\x42\x80\xf6\xa6\x93\xa2\x60\xbf\x1f\xf6\xe3\xf7\xe3\xb1\x17\x9b\x5a\x72\x9d\x29\x89\x18\x89\xf1\xce\xef\xa6\x3e\xa5\xfa\x6d\x0b\x6a\xe3\x09\xd8\x64\x12\x82\xc0\x7d\x43\x56\x88\x33\x37\x44\x8f\x4f\x24\xc6\x2b\xbf\x96\x6e\x2e\xfc\x45\xe7\x53\x28\x51\xe7\x10\x04\xee\x1b\xc2\xcf\xad\x2a\x75\x75\x76\x3c\xa5\x31\xc2\x2b\x16\xde\x01\x57\x52\x02\xd7\x99\x4c\xfe\x85\xf8\x5e\xf1\x67\xd0\x46\xd7\x20\x9d\x66\x15\xe9\x01\xe2\x5d\x37\xf4\x18\x8a\x09\x27\x62\x20\xc9\x1d\xfe\x17\x56\x7a\x9c\x0a\xc5\xeb\x02\xa4\x0e\x79\x09\x4c\xc3\xfa\x05\xa4\x46\xfe\x45\x5d\x69\x55\xd8\x89\x8f\xa3\x12\x74\x5d\x4a\x8f\x87\x99\xcc\xf4\x40\x85\x18\x59\x2c\xcd\x2f\xc6\x84\x37\x66\x3d\xa0\x3b\x01\x71\x9d\xac\x16\x4b\xc2\x6a\xad\x0a\xa6\x33\x7e\xbb\x05\xb9\x5a\x9c\x90\xb2\x43\x7f\x25\x35\x94\x2f\x2c\x5f\x2d\xe1\x94\x14\xec\xe7\xdd\x44\x71\x0a\xbf\x1f\xcc\x2f\x81\xb3\xb7\xd5\x32\xfc\x83\xe8\xac\x00\x55\x1f\xcc\x7e\x83\xd3\x26\x12\xfb\x3d\x12\x74\xd7\xe0\x68\xa3\x4a\x64\x50\x6c\xbc\x4c\x7a\x80\x4d\x48\x1e\x37\x4f\x74\x2e\xea\xe2\x71\xf3\x74\x66\xfe\x56\xf0\xb8\x79\x8a\x8c\x69\x58\x97\x39\x8d\x89\x1d\xf6\x7b\x9f\x6b\x0d\xc5\x56\x57\xf4\xa4\x53\x30\xf1\x76\xaf\x99\x06\xda\x27\x20\xbc\xb8\xbd\xb9\x59\x5f\x3c\x5c\xdd\xfc\xe5\x8c\xb6\xa5\xd2\x8a\xab\x9c\xca\x3a\xcf\x23\x83\x28\x25\x09\xb5\x19\xca\xe8\x62\x49\x7e\x98\xbf\xe7\x49\xe8\x73\x28\x6c\xf0\x45\xf6\xe2\xe3\xe8\x39\x64\x42\xd8\x30\x5f\x67\x95\x06\x09\x25\xf2\xd5\x16\xa4\x7f\xc8\x32\xc3\xbb\x24\x54\xd2\x48\x11\xc3\x0d\x26\x73\x3e\x3c\x57\x15\x4c\x9d\xac\xf8\x03\xaf\xbe\xce\x66\x5c\x7b\xdd\xfb\xfe\x05\x54\x15\x4b\x66\xf6\x6d\x15\xef\x7b\x42\x59\xaa\x72\xea\x67\xc5\xce\xcb\xc6\x78\xec\x48\xa7\x6b\x85\x71\x26\x05\x7a\xc6\x5d\xe6\x0a\xf5\x02\x63\x9f\x19\xe9\xb1\x9b\xc8\xaa\x2d\xd3\x3c\xb5\x26\xf4\xf9\x78\x7e\x6c\x6a\xf2\x40\x7b\xdc\x31\xde\xa5\x54\xc2\xab\xd7\xd7\x09\x4a\x4c\x89\x11\xbe\xdf\x3f\x3e\x61\x12\xef\xf7\xa3\xd5\x50\x7e\x14\x77\x8c\x09\x4a\x42\xdb\x4e\xfb\x3d\x73\x83\xf3\x3c\xc7\x41\xc0\x95\xac\x54\x0e\x4e\x84\xfc\x59\x56\xf0\x89\xcf\x5c\xed\x7e\x6d\xb5\x3e\xb1\xfb\x63\x5b\x90\x82\xa6\x04\x68\x05\xfa\xc1\xb5\x14\x1a\x50\xc7\xe7\x76\xed\xa4\x4a\x7e\x6d\xdb\xb5\xdb\xd8\xd4\xfd\x09\x11\xa1\x2b\x3d\x3b\x5d\x36\x24\x09\x47\x5d\x8d\xa3\xb4\x2d\x6a\x3a\x00\xc5\x73\x60\x65\x07\x16\x3e\x1b\x1a\xb7\x7e\x0f\x2c\x39\xb4\x6c\xda\x0f\x49\x32\xdf\xed\xb7\xdf\xd6\x37\x56\x37\xa1\x88\x36\xb2\x79\xdb\xa8\x38\x12\x61\x56\xf5\x10\x68\x4c\x62\xdb\xf8\xa3\xac\x0b\xdc\x90\xb4\xeb\xc8\xc3\x91\x39\xde\x65\x1b\x34\x3e\x76\x6a\x39\x85\x64\xf8\x1d\x70\x17\xd7\xb7\xf7\xeb\xcb\xc9\x1e\x79\xc7\x03\x18\x47\x90\x57\xb0\x7b\xcf\xbd\x67\xb2\xc3\x59\x86\x25\x19\x89\x90\x2b\x01\x94\xdb\x0f\x11\x66\x95\x4a\x49\xca\xdb\x01\x11\xe1\x2b\xab\x2e\x72\x60\x46\xd6\x0d\x67\x8e\x6c\xca\xff\xc7\x7e\x8f\x3e\x9b\xc6\x96\xdd\xda\x3c\x7e\x70\x6c\x57\xf6\x40\x07\x89\xeb\x0a\xee\xd7\xbf\x99\x4e\xc3\xad\x7a\x45\x03\xa5\xbd\x74\xe6\xd2\x8c\xa3\xf9\xae\x99\x31\xfd\xf2\x85\x24\x96\x15\xd0\xe2\x04\x37\x04\xfe\x4c\xc2\xb9\xdb\xee\x6c\x5e\xbc\x02\xdc\xb8\xca\x68\x39\xf3\x88\x5b\x3e\x1b\xb8\x9e\xa0\x1d\x29\xc5\xa1\x60\x9a\xb9\x20\x71\x93\xf5\x4e\x8f\x23\x6e\x55\xd4\x59\x4c\x42\xcc\xdb\xea\xb5\xfc\xfc\xbf\x22\x6c\x2f\x82\x16\xdf\x6c\x72\x9d\x09\x36\x71\x5a\x52\xea\xee\x85\xe1\xab\x23\x08\x7a\x62\x46\x8b\x65\x4b\xd3\x15\x48\x71\x04\x34\xdb\xa0\x14\xbb\x37\xce\xe7\x30\x9b\x95\x07\x80\x53\xbb\x15\x8a\x71\xa4\xd3\x52\xbd\xfa\x57\x37\xff\x9c\x5f\x5f\x5d\x7e\xbf\x7f\x38\x7f\x58\x7f\x5f\xdf\xdd\x79\x2b\xef\x1b\xab\xab\x4c\x26\x9e\x56\x5e\x5f\x3e\xde\x2b\xc4\x95\x5b\xb3\x71\x90\x47\xd4\xe0\x9e\x9f\x87\x57\x4d\xff\xfe\x64\x41\x80\x18\x5d\xc2\x29\x36\x0f\x8d\x13\x92\x06\x41\xda\xd2\xad\xf1\x69\xba\x9b\x70\x53\x42\x95\x0e\xd9\x75\x60\x88\x9b\xa6\x7d\xef\x31\x47\x85\x66\xed\x19\x42\x6e\xc8\xb1\x7e\x84\x71\xc6\xa0\x8f\xd9\x47\x56\x93\x5a\x9f\x9a\x8c\x4a\xcd\x19\x74\xd9\x32\x0c\xcb\x06\x3c\x36\xff\x4c\x63\x96\xc5\xc7\xa4\xce\x2c\x7d\x8e\x9c\x9c\xa4\xd5\xad\x2f\xa7\x5c\xcb\x1a\x1c\xfd\xf2\x5f\x00\x00\x00\xff\xff\xb7\x83\xb6\x2c\x1c\x0c\x00\x00")

func wwwJsReconnectingWebsocketMinJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwJsReconnectingWebsocketMinJs,
		"www/js/reconnecting-websocket.min.js",
	)
}

func wwwJsReconnectingWebsocketMinJs() (*asset, error) {
	bytes, err := wwwJsReconnectingWebsocketMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/js/reconnecting-websocket.min.js", size: 3100, mode: os.FileMode(420), modTime: time.Unix(1476401448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/js/reconnecting-websocket.min.js": wwwJsReconnectingWebsocketMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"reconnecting-websocket.min.js": &bintree{wwwJsReconnectingWebsocketMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

